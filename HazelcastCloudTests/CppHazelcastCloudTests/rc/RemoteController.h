/**
 * Autogenerated by Thrift Compiler (0.13.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RemoteController_H
#define RemoteController_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include <memory>
#include "remote_controller_types.h"

namespace hazelcast { namespace client { namespace test { namespace remote {

#ifdef _MSC_VER
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class RemoteControllerIf {
 public:
  virtual ~RemoteControllerIf() {}
  virtual bool ping() = 0;
  virtual bool clean() = 0;
  virtual bool exit() = 0;
  virtual void createCluster(Cluster& _return, const std::string& hzVersion, const std::string& xmlconfig) = 0;
  virtual void createClusterKeepClusterName(Cluster& _return, const std::string& hzVersion, const std::string& xmlconfig) = 0;
  virtual void startMember(Member& _return, const std::string& clusterId) = 0;
  virtual bool shutdownMember(const std::string& clusterId, const std::string& memberId) = 0;
  virtual bool terminateMember(const std::string& clusterId, const std::string& memberId) = 0;
  virtual bool suspendMember(const std::string& clusterId, const std::string& memberId) = 0;
  virtual bool resumeMember(const std::string& clusterId, const std::string& memberId) = 0;
  virtual bool shutdownCluster(const std::string& clusterId) = 0;
  virtual bool terminateCluster(const std::string& clusterId) = 0;
  virtual void splitMemberFromCluster(Cluster& _return, const std::string& memberId) = 0;
  virtual void mergeMemberToCluster(Cluster& _return, const std::string& clusterId, const std::string& memberId) = 0;
  virtual void loginToHazelcastCloud(const std::string& uri, const std::string& apiKey, const std::string& apiSecret) = 0;
  virtual void createHazelcastCloudStandardCluster(CloudCluster& _return, const std::string& hazelcastVersion, const bool isTlsEnabled) = 0;
  virtual void createHazelcastCloudEnterpriseCluster(CloudCluster& _return, const std::string& cloudProvider, const std::string& hazelcastVersion, const bool isTlsEnabled) = 0;
  virtual bool scaleUpDownHazelcastCloudStandardCluster(const std::string& id, const int32_t scaleNumber) = 0;
  virtual void getHazelcastCloudCluster(CloudCluster& _return, const std::string& id) = 0;
  virtual void stopHazelcastCloudCluster(CloudCluster& _return, const std::string& id) = 0;
  virtual void resumeHazelcastCloudCluster(CloudCluster& _return, const std::string& id) = 0;
  virtual bool deleteHazelcastCloudCluster(const std::string& id) = 0;
  virtual void executeOnController(Response& _return, const std::string& clusterId, const std::string& script, const Lang::type lang) = 0;
};

class RemoteControllerIfFactory {
 public:
  typedef RemoteControllerIf Handler;

  virtual ~RemoteControllerIfFactory() {}

  virtual RemoteControllerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RemoteControllerIf* /* handler */) = 0;
};

class RemoteControllerIfSingletonFactory : virtual public RemoteControllerIfFactory {
 public:
  RemoteControllerIfSingletonFactory(const ::std::shared_ptr<RemoteControllerIf>& iface) : iface_(iface) {}
  virtual ~RemoteControllerIfSingletonFactory() {}

  virtual RemoteControllerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RemoteControllerIf* /* handler */) {}

 protected:
  ::std::shared_ptr<RemoteControllerIf> iface_;
};

class RemoteControllerNull : virtual public RemoteControllerIf {
 public:
  virtual ~RemoteControllerNull() {}
  bool ping() {
    bool _return = false;
    return _return;
  }
  bool clean() {
    bool _return = false;
    return _return;
  }
  bool exit() {
    bool _return = false;
    return _return;
  }
  void createCluster(Cluster& /* _return */, const std::string& /* hzVersion */, const std::string& /* xmlconfig */) {
    return;
  }
  void createClusterKeepClusterName(Cluster& /* _return */, const std::string& /* hzVersion */, const std::string& /* xmlconfig */) {
    return;
  }
  void startMember(Member& /* _return */, const std::string& /* clusterId */) {
    return;
  }
  bool shutdownMember(const std::string& /* clusterId */, const std::string& /* memberId */) {
    bool _return = false;
    return _return;
  }
  bool terminateMember(const std::string& /* clusterId */, const std::string& /* memberId */) {
    bool _return = false;
    return _return;
  }
  bool suspendMember(const std::string& /* clusterId */, const std::string& /* memberId */) {
    bool _return = false;
    return _return;
  }
  bool resumeMember(const std::string& /* clusterId */, const std::string& /* memberId */) {
    bool _return = false;
    return _return;
  }
  bool shutdownCluster(const std::string& /* clusterId */) {
    bool _return = false;
    return _return;
  }
  bool terminateCluster(const std::string& /* clusterId */) {
    bool _return = false;
    return _return;
  }
  void splitMemberFromCluster(Cluster& /* _return */, const std::string& /* memberId */) {
    return;
  }
  void mergeMemberToCluster(Cluster& /* _return */, const std::string& /* clusterId */, const std::string& /* memberId */) {
    return;
  }
  void loginToHazelcastCloud(const std::string& /* uri */, const std::string& /* apiKey */, const std::string& /* apiSecret */) {
    return;
  }
  void createHazelcastCloudStandardCluster(CloudCluster& /* _return */, const std::string& /* hazelcastVersion */, const bool /* isTlsEnabled */) {
    return;
  }
  void createHazelcastCloudEnterpriseCluster(CloudCluster& /* _return */, const std::string& /* cloudProvider */, const std::string& /* hazelcastVersion */, const bool /* isTlsEnabled */) {
    return;
  }
  bool scaleUpDownHazelcastCloudStandardCluster(const std::string& /* id */, const int32_t /* scaleNumber */) {
    bool _return = false;
    return _return;
  }
  void getHazelcastCloudCluster(CloudCluster& /* _return */, const std::string& /* id */) {
    return;
  }
  void stopHazelcastCloudCluster(CloudCluster& /* _return */, const std::string& /* id */) {
    return;
  }
  void resumeHazelcastCloudCluster(CloudCluster& /* _return */, const std::string& /* id */) {
    return;
  }
  bool deleteHazelcastCloudCluster(const std::string& /* id */) {
    bool _return = false;
    return _return;
  }
  void executeOnController(Response& /* _return */, const std::string& /* clusterId */, const std::string& /* script */, const Lang::type /* lang */) {
    return;
  }
};


class RemoteController_ping_args {
 public:

  RemoteController_ping_args(const RemoteController_ping_args&);
  RemoteController_ping_args& operator=(const RemoteController_ping_args&);
  RemoteController_ping_args() {
  }

  virtual ~RemoteController_ping_args() noexcept;

  bool operator == (const RemoteController_ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteController_ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_ping_pargs {
 public:


  virtual ~RemoteController_ping_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_ping_result__isset {
  _RemoteController_ping_result__isset() : success(false) {}
  bool success :1;
} _RemoteController_ping_result__isset;

class RemoteController_ping_result {
 public:

  RemoteController_ping_result(const RemoteController_ping_result&);
  RemoteController_ping_result& operator=(const RemoteController_ping_result&);
  RemoteController_ping_result() : success(0) {
  }

  virtual ~RemoteController_ping_result() noexcept;
  bool success;

  _RemoteController_ping_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RemoteController_ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteController_ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_ping_presult__isset {
  _RemoteController_ping_presult__isset() : success(false) {}
  bool success :1;
} _RemoteController_ping_presult__isset;

class RemoteController_ping_presult {
 public:


  virtual ~RemoteController_ping_presult() noexcept;
  bool* success;

  _RemoteController_ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RemoteController_clean_args {
 public:

  RemoteController_clean_args(const RemoteController_clean_args&);
  RemoteController_clean_args& operator=(const RemoteController_clean_args&);
  RemoteController_clean_args() {
  }

  virtual ~RemoteController_clean_args() noexcept;

  bool operator == (const RemoteController_clean_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteController_clean_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_clean_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_clean_pargs {
 public:


  virtual ~RemoteController_clean_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_clean_result__isset {
  _RemoteController_clean_result__isset() : success(false) {}
  bool success :1;
} _RemoteController_clean_result__isset;

class RemoteController_clean_result {
 public:

  RemoteController_clean_result(const RemoteController_clean_result&);
  RemoteController_clean_result& operator=(const RemoteController_clean_result&);
  RemoteController_clean_result() : success(0) {
  }

  virtual ~RemoteController_clean_result() noexcept;
  bool success;

  _RemoteController_clean_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RemoteController_clean_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteController_clean_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_clean_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_clean_presult__isset {
  _RemoteController_clean_presult__isset() : success(false) {}
  bool success :1;
} _RemoteController_clean_presult__isset;

class RemoteController_clean_presult {
 public:


  virtual ~RemoteController_clean_presult() noexcept;
  bool* success;

  _RemoteController_clean_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class RemoteController_exit_args {
 public:

  RemoteController_exit_args(const RemoteController_exit_args&);
  RemoteController_exit_args& operator=(const RemoteController_exit_args&);
  RemoteController_exit_args() {
  }

  virtual ~RemoteController_exit_args() noexcept;

  bool operator == (const RemoteController_exit_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteController_exit_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_exit_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_exit_pargs {
 public:


  virtual ~RemoteController_exit_pargs() noexcept;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_exit_result__isset {
  _RemoteController_exit_result__isset() : success(false) {}
  bool success :1;
} _RemoteController_exit_result__isset;

class RemoteController_exit_result {
 public:

  RemoteController_exit_result(const RemoteController_exit_result&);
  RemoteController_exit_result& operator=(const RemoteController_exit_result&);
  RemoteController_exit_result() : success(0) {
  }

  virtual ~RemoteController_exit_result() noexcept;
  bool success;

  _RemoteController_exit_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RemoteController_exit_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteController_exit_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_exit_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_exit_presult__isset {
  _RemoteController_exit_presult__isset() : success(false) {}
  bool success :1;
} _RemoteController_exit_presult__isset;

class RemoteController_exit_presult {
 public:


  virtual ~RemoteController_exit_presult() noexcept;
  bool* success;

  _RemoteController_exit_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteController_createCluster_args__isset {
  _RemoteController_createCluster_args__isset() : hzVersion(false), xmlconfig(false) {}
  bool hzVersion :1;
  bool xmlconfig :1;
} _RemoteController_createCluster_args__isset;

class RemoteController_createCluster_args {
 public:

  RemoteController_createCluster_args(const RemoteController_createCluster_args&);
  RemoteController_createCluster_args& operator=(const RemoteController_createCluster_args&);
  RemoteController_createCluster_args() : hzVersion(), xmlconfig() {
  }

  virtual ~RemoteController_createCluster_args() noexcept;
  std::string hzVersion;
  std::string xmlconfig;

  _RemoteController_createCluster_args__isset __isset;

  void __set_hzVersion(const std::string& val);

  void __set_xmlconfig(const std::string& val);

  bool operator == (const RemoteController_createCluster_args & rhs) const
  {
    if (!(hzVersion == rhs.hzVersion))
      return false;
    if (!(xmlconfig == rhs.xmlconfig))
      return false;
    return true;
  }
  bool operator != (const RemoteController_createCluster_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_createCluster_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_createCluster_pargs {
 public:


  virtual ~RemoteController_createCluster_pargs() noexcept;
  const std::string* hzVersion;
  const std::string* xmlconfig;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_createCluster_result__isset {
  _RemoteController_createCluster_result__isset() : success(false), serverException(false) {}
  bool success :1;
  bool serverException :1;
} _RemoteController_createCluster_result__isset;

class RemoteController_createCluster_result {
 public:

  RemoteController_createCluster_result(const RemoteController_createCluster_result&);
  RemoteController_createCluster_result& operator=(const RemoteController_createCluster_result&);
  RemoteController_createCluster_result() {
  }

  virtual ~RemoteController_createCluster_result() noexcept;
  Cluster success;
  ServerException serverException;

  _RemoteController_createCluster_result__isset __isset;

  void __set_success(const Cluster& val);

  void __set_serverException(const ServerException& val);

  bool operator == (const RemoteController_createCluster_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(serverException == rhs.serverException))
      return false;
    return true;
  }
  bool operator != (const RemoteController_createCluster_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_createCluster_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_createCluster_presult__isset {
  _RemoteController_createCluster_presult__isset() : success(false), serverException(false) {}
  bool success :1;
  bool serverException :1;
} _RemoteController_createCluster_presult__isset;

class RemoteController_createCluster_presult {
 public:


  virtual ~RemoteController_createCluster_presult() noexcept;
  Cluster* success;
  ServerException serverException;

  _RemoteController_createCluster_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteController_createClusterKeepClusterName_args__isset {
  _RemoteController_createClusterKeepClusterName_args__isset() : hzVersion(false), xmlconfig(false) {}
  bool hzVersion :1;
  bool xmlconfig :1;
} _RemoteController_createClusterKeepClusterName_args__isset;

class RemoteController_createClusterKeepClusterName_args {
 public:

  RemoteController_createClusterKeepClusterName_args(const RemoteController_createClusterKeepClusterName_args&);
  RemoteController_createClusterKeepClusterName_args& operator=(const RemoteController_createClusterKeepClusterName_args&);
  RemoteController_createClusterKeepClusterName_args() : hzVersion(), xmlconfig() {
  }

  virtual ~RemoteController_createClusterKeepClusterName_args() noexcept;
  std::string hzVersion;
  std::string xmlconfig;

  _RemoteController_createClusterKeepClusterName_args__isset __isset;

  void __set_hzVersion(const std::string& val);

  void __set_xmlconfig(const std::string& val);

  bool operator == (const RemoteController_createClusterKeepClusterName_args & rhs) const
  {
    if (!(hzVersion == rhs.hzVersion))
      return false;
    if (!(xmlconfig == rhs.xmlconfig))
      return false;
    return true;
  }
  bool operator != (const RemoteController_createClusterKeepClusterName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_createClusterKeepClusterName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_createClusterKeepClusterName_pargs {
 public:


  virtual ~RemoteController_createClusterKeepClusterName_pargs() noexcept;
  const std::string* hzVersion;
  const std::string* xmlconfig;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_createClusterKeepClusterName_result__isset {
  _RemoteController_createClusterKeepClusterName_result__isset() : success(false), serverException(false) {}
  bool success :1;
  bool serverException :1;
} _RemoteController_createClusterKeepClusterName_result__isset;

class RemoteController_createClusterKeepClusterName_result {
 public:

  RemoteController_createClusterKeepClusterName_result(const RemoteController_createClusterKeepClusterName_result&);
  RemoteController_createClusterKeepClusterName_result& operator=(const RemoteController_createClusterKeepClusterName_result&);
  RemoteController_createClusterKeepClusterName_result() {
  }

  virtual ~RemoteController_createClusterKeepClusterName_result() noexcept;
  Cluster success;
  ServerException serverException;

  _RemoteController_createClusterKeepClusterName_result__isset __isset;

  void __set_success(const Cluster& val);

  void __set_serverException(const ServerException& val);

  bool operator == (const RemoteController_createClusterKeepClusterName_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(serverException == rhs.serverException))
      return false;
    return true;
  }
  bool operator != (const RemoteController_createClusterKeepClusterName_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_createClusterKeepClusterName_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_createClusterKeepClusterName_presult__isset {
  _RemoteController_createClusterKeepClusterName_presult__isset() : success(false), serverException(false) {}
  bool success :1;
  bool serverException :1;
} _RemoteController_createClusterKeepClusterName_presult__isset;

class RemoteController_createClusterKeepClusterName_presult {
 public:


  virtual ~RemoteController_createClusterKeepClusterName_presult() noexcept;
  Cluster* success;
  ServerException serverException;

  _RemoteController_createClusterKeepClusterName_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteController_startMember_args__isset {
  _RemoteController_startMember_args__isset() : clusterId(false) {}
  bool clusterId :1;
} _RemoteController_startMember_args__isset;

class RemoteController_startMember_args {
 public:

  RemoteController_startMember_args(const RemoteController_startMember_args&);
  RemoteController_startMember_args& operator=(const RemoteController_startMember_args&);
  RemoteController_startMember_args() : clusterId() {
  }

  virtual ~RemoteController_startMember_args() noexcept;
  std::string clusterId;

  _RemoteController_startMember_args__isset __isset;

  void __set_clusterId(const std::string& val);

  bool operator == (const RemoteController_startMember_args & rhs) const
  {
    if (!(clusterId == rhs.clusterId))
      return false;
    return true;
  }
  bool operator != (const RemoteController_startMember_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_startMember_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_startMember_pargs {
 public:


  virtual ~RemoteController_startMember_pargs() noexcept;
  const std::string* clusterId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_startMember_result__isset {
  _RemoteController_startMember_result__isset() : success(false), serverException(false) {}
  bool success :1;
  bool serverException :1;
} _RemoteController_startMember_result__isset;

class RemoteController_startMember_result {
 public:

  RemoteController_startMember_result(const RemoteController_startMember_result&);
  RemoteController_startMember_result& operator=(const RemoteController_startMember_result&);
  RemoteController_startMember_result() {
  }

  virtual ~RemoteController_startMember_result() noexcept;
  Member success;
  ServerException serverException;

  _RemoteController_startMember_result__isset __isset;

  void __set_success(const Member& val);

  void __set_serverException(const ServerException& val);

  bool operator == (const RemoteController_startMember_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(serverException == rhs.serverException))
      return false;
    return true;
  }
  bool operator != (const RemoteController_startMember_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_startMember_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_startMember_presult__isset {
  _RemoteController_startMember_presult__isset() : success(false), serverException(false) {}
  bool success :1;
  bool serverException :1;
} _RemoteController_startMember_presult__isset;

class RemoteController_startMember_presult {
 public:


  virtual ~RemoteController_startMember_presult() noexcept;
  Member* success;
  ServerException serverException;

  _RemoteController_startMember_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteController_shutdownMember_args__isset {
  _RemoteController_shutdownMember_args__isset() : clusterId(false), memberId(false) {}
  bool clusterId :1;
  bool memberId :1;
} _RemoteController_shutdownMember_args__isset;

class RemoteController_shutdownMember_args {
 public:

  RemoteController_shutdownMember_args(const RemoteController_shutdownMember_args&);
  RemoteController_shutdownMember_args& operator=(const RemoteController_shutdownMember_args&);
  RemoteController_shutdownMember_args() : clusterId(), memberId() {
  }

  virtual ~RemoteController_shutdownMember_args() noexcept;
  std::string clusterId;
  std::string memberId;

  _RemoteController_shutdownMember_args__isset __isset;

  void __set_clusterId(const std::string& val);

  void __set_memberId(const std::string& val);

  bool operator == (const RemoteController_shutdownMember_args & rhs) const
  {
    if (!(clusterId == rhs.clusterId))
      return false;
    if (!(memberId == rhs.memberId))
      return false;
    return true;
  }
  bool operator != (const RemoteController_shutdownMember_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_shutdownMember_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_shutdownMember_pargs {
 public:


  virtual ~RemoteController_shutdownMember_pargs() noexcept;
  const std::string* clusterId;
  const std::string* memberId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_shutdownMember_result__isset {
  _RemoteController_shutdownMember_result__isset() : success(false) {}
  bool success :1;
} _RemoteController_shutdownMember_result__isset;

class RemoteController_shutdownMember_result {
 public:

  RemoteController_shutdownMember_result(const RemoteController_shutdownMember_result&);
  RemoteController_shutdownMember_result& operator=(const RemoteController_shutdownMember_result&);
  RemoteController_shutdownMember_result() : success(0) {
  }

  virtual ~RemoteController_shutdownMember_result() noexcept;
  bool success;

  _RemoteController_shutdownMember_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RemoteController_shutdownMember_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteController_shutdownMember_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_shutdownMember_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_shutdownMember_presult__isset {
  _RemoteController_shutdownMember_presult__isset() : success(false) {}
  bool success :1;
} _RemoteController_shutdownMember_presult__isset;

class RemoteController_shutdownMember_presult {
 public:


  virtual ~RemoteController_shutdownMember_presult() noexcept;
  bool* success;

  _RemoteController_shutdownMember_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteController_terminateMember_args__isset {
  _RemoteController_terminateMember_args__isset() : clusterId(false), memberId(false) {}
  bool clusterId :1;
  bool memberId :1;
} _RemoteController_terminateMember_args__isset;

class RemoteController_terminateMember_args {
 public:

  RemoteController_terminateMember_args(const RemoteController_terminateMember_args&);
  RemoteController_terminateMember_args& operator=(const RemoteController_terminateMember_args&);
  RemoteController_terminateMember_args() : clusterId(), memberId() {
  }

  virtual ~RemoteController_terminateMember_args() noexcept;
  std::string clusterId;
  std::string memberId;

  _RemoteController_terminateMember_args__isset __isset;

  void __set_clusterId(const std::string& val);

  void __set_memberId(const std::string& val);

  bool operator == (const RemoteController_terminateMember_args & rhs) const
  {
    if (!(clusterId == rhs.clusterId))
      return false;
    if (!(memberId == rhs.memberId))
      return false;
    return true;
  }
  bool operator != (const RemoteController_terminateMember_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_terminateMember_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_terminateMember_pargs {
 public:


  virtual ~RemoteController_terminateMember_pargs() noexcept;
  const std::string* clusterId;
  const std::string* memberId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_terminateMember_result__isset {
  _RemoteController_terminateMember_result__isset() : success(false) {}
  bool success :1;
} _RemoteController_terminateMember_result__isset;

class RemoteController_terminateMember_result {
 public:

  RemoteController_terminateMember_result(const RemoteController_terminateMember_result&);
  RemoteController_terminateMember_result& operator=(const RemoteController_terminateMember_result&);
  RemoteController_terminateMember_result() : success(0) {
  }

  virtual ~RemoteController_terminateMember_result() noexcept;
  bool success;

  _RemoteController_terminateMember_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RemoteController_terminateMember_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteController_terminateMember_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_terminateMember_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_terminateMember_presult__isset {
  _RemoteController_terminateMember_presult__isset() : success(false) {}
  bool success :1;
} _RemoteController_terminateMember_presult__isset;

class RemoteController_terminateMember_presult {
 public:


  virtual ~RemoteController_terminateMember_presult() noexcept;
  bool* success;

  _RemoteController_terminateMember_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteController_suspendMember_args__isset {
  _RemoteController_suspendMember_args__isset() : clusterId(false), memberId(false) {}
  bool clusterId :1;
  bool memberId :1;
} _RemoteController_suspendMember_args__isset;

class RemoteController_suspendMember_args {
 public:

  RemoteController_suspendMember_args(const RemoteController_suspendMember_args&);
  RemoteController_suspendMember_args& operator=(const RemoteController_suspendMember_args&);
  RemoteController_suspendMember_args() : clusterId(), memberId() {
  }

  virtual ~RemoteController_suspendMember_args() noexcept;
  std::string clusterId;
  std::string memberId;

  _RemoteController_suspendMember_args__isset __isset;

  void __set_clusterId(const std::string& val);

  void __set_memberId(const std::string& val);

  bool operator == (const RemoteController_suspendMember_args & rhs) const
  {
    if (!(clusterId == rhs.clusterId))
      return false;
    if (!(memberId == rhs.memberId))
      return false;
    return true;
  }
  bool operator != (const RemoteController_suspendMember_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_suspendMember_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_suspendMember_pargs {
 public:


  virtual ~RemoteController_suspendMember_pargs() noexcept;
  const std::string* clusterId;
  const std::string* memberId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_suspendMember_result__isset {
  _RemoteController_suspendMember_result__isset() : success(false) {}
  bool success :1;
} _RemoteController_suspendMember_result__isset;

class RemoteController_suspendMember_result {
 public:

  RemoteController_suspendMember_result(const RemoteController_suspendMember_result&);
  RemoteController_suspendMember_result& operator=(const RemoteController_suspendMember_result&);
  RemoteController_suspendMember_result() : success(0) {
  }

  virtual ~RemoteController_suspendMember_result() noexcept;
  bool success;

  _RemoteController_suspendMember_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RemoteController_suspendMember_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteController_suspendMember_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_suspendMember_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_suspendMember_presult__isset {
  _RemoteController_suspendMember_presult__isset() : success(false) {}
  bool success :1;
} _RemoteController_suspendMember_presult__isset;

class RemoteController_suspendMember_presult {
 public:


  virtual ~RemoteController_suspendMember_presult() noexcept;
  bool* success;

  _RemoteController_suspendMember_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteController_resumeMember_args__isset {
  _RemoteController_resumeMember_args__isset() : clusterId(false), memberId(false) {}
  bool clusterId :1;
  bool memberId :1;
} _RemoteController_resumeMember_args__isset;

class RemoteController_resumeMember_args {
 public:

  RemoteController_resumeMember_args(const RemoteController_resumeMember_args&);
  RemoteController_resumeMember_args& operator=(const RemoteController_resumeMember_args&);
  RemoteController_resumeMember_args() : clusterId(), memberId() {
  }

  virtual ~RemoteController_resumeMember_args() noexcept;
  std::string clusterId;
  std::string memberId;

  _RemoteController_resumeMember_args__isset __isset;

  void __set_clusterId(const std::string& val);

  void __set_memberId(const std::string& val);

  bool operator == (const RemoteController_resumeMember_args & rhs) const
  {
    if (!(clusterId == rhs.clusterId))
      return false;
    if (!(memberId == rhs.memberId))
      return false;
    return true;
  }
  bool operator != (const RemoteController_resumeMember_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_resumeMember_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_resumeMember_pargs {
 public:


  virtual ~RemoteController_resumeMember_pargs() noexcept;
  const std::string* clusterId;
  const std::string* memberId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_resumeMember_result__isset {
  _RemoteController_resumeMember_result__isset() : success(false) {}
  bool success :1;
} _RemoteController_resumeMember_result__isset;

class RemoteController_resumeMember_result {
 public:

  RemoteController_resumeMember_result(const RemoteController_resumeMember_result&);
  RemoteController_resumeMember_result& operator=(const RemoteController_resumeMember_result&);
  RemoteController_resumeMember_result() : success(0) {
  }

  virtual ~RemoteController_resumeMember_result() noexcept;
  bool success;

  _RemoteController_resumeMember_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RemoteController_resumeMember_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteController_resumeMember_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_resumeMember_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_resumeMember_presult__isset {
  _RemoteController_resumeMember_presult__isset() : success(false) {}
  bool success :1;
} _RemoteController_resumeMember_presult__isset;

class RemoteController_resumeMember_presult {
 public:


  virtual ~RemoteController_resumeMember_presult() noexcept;
  bool* success;

  _RemoteController_resumeMember_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteController_shutdownCluster_args__isset {
  _RemoteController_shutdownCluster_args__isset() : clusterId(false) {}
  bool clusterId :1;
} _RemoteController_shutdownCluster_args__isset;

class RemoteController_shutdownCluster_args {
 public:

  RemoteController_shutdownCluster_args(const RemoteController_shutdownCluster_args&);
  RemoteController_shutdownCluster_args& operator=(const RemoteController_shutdownCluster_args&);
  RemoteController_shutdownCluster_args() : clusterId() {
  }

  virtual ~RemoteController_shutdownCluster_args() noexcept;
  std::string clusterId;

  _RemoteController_shutdownCluster_args__isset __isset;

  void __set_clusterId(const std::string& val);

  bool operator == (const RemoteController_shutdownCluster_args & rhs) const
  {
    if (!(clusterId == rhs.clusterId))
      return false;
    return true;
  }
  bool operator != (const RemoteController_shutdownCluster_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_shutdownCluster_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_shutdownCluster_pargs {
 public:


  virtual ~RemoteController_shutdownCluster_pargs() noexcept;
  const std::string* clusterId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_shutdownCluster_result__isset {
  _RemoteController_shutdownCluster_result__isset() : success(false) {}
  bool success :1;
} _RemoteController_shutdownCluster_result__isset;

class RemoteController_shutdownCluster_result {
 public:

  RemoteController_shutdownCluster_result(const RemoteController_shutdownCluster_result&);
  RemoteController_shutdownCluster_result& operator=(const RemoteController_shutdownCluster_result&);
  RemoteController_shutdownCluster_result() : success(0) {
  }

  virtual ~RemoteController_shutdownCluster_result() noexcept;
  bool success;

  _RemoteController_shutdownCluster_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RemoteController_shutdownCluster_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteController_shutdownCluster_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_shutdownCluster_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_shutdownCluster_presult__isset {
  _RemoteController_shutdownCluster_presult__isset() : success(false) {}
  bool success :1;
} _RemoteController_shutdownCluster_presult__isset;

class RemoteController_shutdownCluster_presult {
 public:


  virtual ~RemoteController_shutdownCluster_presult() noexcept;
  bool* success;

  _RemoteController_shutdownCluster_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteController_terminateCluster_args__isset {
  _RemoteController_terminateCluster_args__isset() : clusterId(false) {}
  bool clusterId :1;
} _RemoteController_terminateCluster_args__isset;

class RemoteController_terminateCluster_args {
 public:

  RemoteController_terminateCluster_args(const RemoteController_terminateCluster_args&);
  RemoteController_terminateCluster_args& operator=(const RemoteController_terminateCluster_args&);
  RemoteController_terminateCluster_args() : clusterId() {
  }

  virtual ~RemoteController_terminateCluster_args() noexcept;
  std::string clusterId;

  _RemoteController_terminateCluster_args__isset __isset;

  void __set_clusterId(const std::string& val);

  bool operator == (const RemoteController_terminateCluster_args & rhs) const
  {
    if (!(clusterId == rhs.clusterId))
      return false;
    return true;
  }
  bool operator != (const RemoteController_terminateCluster_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_terminateCluster_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_terminateCluster_pargs {
 public:


  virtual ~RemoteController_terminateCluster_pargs() noexcept;
  const std::string* clusterId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_terminateCluster_result__isset {
  _RemoteController_terminateCluster_result__isset() : success(false) {}
  bool success :1;
} _RemoteController_terminateCluster_result__isset;

class RemoteController_terminateCluster_result {
 public:

  RemoteController_terminateCluster_result(const RemoteController_terminateCluster_result&);
  RemoteController_terminateCluster_result& operator=(const RemoteController_terminateCluster_result&);
  RemoteController_terminateCluster_result() : success(0) {
  }

  virtual ~RemoteController_terminateCluster_result() noexcept;
  bool success;

  _RemoteController_terminateCluster_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RemoteController_terminateCluster_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteController_terminateCluster_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_terminateCluster_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_terminateCluster_presult__isset {
  _RemoteController_terminateCluster_presult__isset() : success(false) {}
  bool success :1;
} _RemoteController_terminateCluster_presult__isset;

class RemoteController_terminateCluster_presult {
 public:


  virtual ~RemoteController_terminateCluster_presult() noexcept;
  bool* success;

  _RemoteController_terminateCluster_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteController_splitMemberFromCluster_args__isset {
  _RemoteController_splitMemberFromCluster_args__isset() : memberId(false) {}
  bool memberId :1;
} _RemoteController_splitMemberFromCluster_args__isset;

class RemoteController_splitMemberFromCluster_args {
 public:

  RemoteController_splitMemberFromCluster_args(const RemoteController_splitMemberFromCluster_args&);
  RemoteController_splitMemberFromCluster_args& operator=(const RemoteController_splitMemberFromCluster_args&);
  RemoteController_splitMemberFromCluster_args() : memberId() {
  }

  virtual ~RemoteController_splitMemberFromCluster_args() noexcept;
  std::string memberId;

  _RemoteController_splitMemberFromCluster_args__isset __isset;

  void __set_memberId(const std::string& val);

  bool operator == (const RemoteController_splitMemberFromCluster_args & rhs) const
  {
    if (!(memberId == rhs.memberId))
      return false;
    return true;
  }
  bool operator != (const RemoteController_splitMemberFromCluster_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_splitMemberFromCluster_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_splitMemberFromCluster_pargs {
 public:


  virtual ~RemoteController_splitMemberFromCluster_pargs() noexcept;
  const std::string* memberId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_splitMemberFromCluster_result__isset {
  _RemoteController_splitMemberFromCluster_result__isset() : success(false) {}
  bool success :1;
} _RemoteController_splitMemberFromCluster_result__isset;

class RemoteController_splitMemberFromCluster_result {
 public:

  RemoteController_splitMemberFromCluster_result(const RemoteController_splitMemberFromCluster_result&);
  RemoteController_splitMemberFromCluster_result& operator=(const RemoteController_splitMemberFromCluster_result&);
  RemoteController_splitMemberFromCluster_result() {
  }

  virtual ~RemoteController_splitMemberFromCluster_result() noexcept;
  Cluster success;

  _RemoteController_splitMemberFromCluster_result__isset __isset;

  void __set_success(const Cluster& val);

  bool operator == (const RemoteController_splitMemberFromCluster_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteController_splitMemberFromCluster_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_splitMemberFromCluster_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_splitMemberFromCluster_presult__isset {
  _RemoteController_splitMemberFromCluster_presult__isset() : success(false) {}
  bool success :1;
} _RemoteController_splitMemberFromCluster_presult__isset;

class RemoteController_splitMemberFromCluster_presult {
 public:


  virtual ~RemoteController_splitMemberFromCluster_presult() noexcept;
  Cluster* success;

  _RemoteController_splitMemberFromCluster_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteController_mergeMemberToCluster_args__isset {
  _RemoteController_mergeMemberToCluster_args__isset() : clusterId(false), memberId(false) {}
  bool clusterId :1;
  bool memberId :1;
} _RemoteController_mergeMemberToCluster_args__isset;

class RemoteController_mergeMemberToCluster_args {
 public:

  RemoteController_mergeMemberToCluster_args(const RemoteController_mergeMemberToCluster_args&);
  RemoteController_mergeMemberToCluster_args& operator=(const RemoteController_mergeMemberToCluster_args&);
  RemoteController_mergeMemberToCluster_args() : clusterId(), memberId() {
  }

  virtual ~RemoteController_mergeMemberToCluster_args() noexcept;
  std::string clusterId;
  std::string memberId;

  _RemoteController_mergeMemberToCluster_args__isset __isset;

  void __set_clusterId(const std::string& val);

  void __set_memberId(const std::string& val);

  bool operator == (const RemoteController_mergeMemberToCluster_args & rhs) const
  {
    if (!(clusterId == rhs.clusterId))
      return false;
    if (!(memberId == rhs.memberId))
      return false;
    return true;
  }
  bool operator != (const RemoteController_mergeMemberToCluster_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_mergeMemberToCluster_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_mergeMemberToCluster_pargs {
 public:


  virtual ~RemoteController_mergeMemberToCluster_pargs() noexcept;
  const std::string* clusterId;
  const std::string* memberId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_mergeMemberToCluster_result__isset {
  _RemoteController_mergeMemberToCluster_result__isset() : success(false) {}
  bool success :1;
} _RemoteController_mergeMemberToCluster_result__isset;

class RemoteController_mergeMemberToCluster_result {
 public:

  RemoteController_mergeMemberToCluster_result(const RemoteController_mergeMemberToCluster_result&);
  RemoteController_mergeMemberToCluster_result& operator=(const RemoteController_mergeMemberToCluster_result&);
  RemoteController_mergeMemberToCluster_result() {
  }

  virtual ~RemoteController_mergeMemberToCluster_result() noexcept;
  Cluster success;

  _RemoteController_mergeMemberToCluster_result__isset __isset;

  void __set_success(const Cluster& val);

  bool operator == (const RemoteController_mergeMemberToCluster_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteController_mergeMemberToCluster_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_mergeMemberToCluster_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_mergeMemberToCluster_presult__isset {
  _RemoteController_mergeMemberToCluster_presult__isset() : success(false) {}
  bool success :1;
} _RemoteController_mergeMemberToCluster_presult__isset;

class RemoteController_mergeMemberToCluster_presult {
 public:


  virtual ~RemoteController_mergeMemberToCluster_presult() noexcept;
  Cluster* success;

  _RemoteController_mergeMemberToCluster_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteController_loginToHazelcastCloud_args__isset {
  _RemoteController_loginToHazelcastCloud_args__isset() : uri(false), apiKey(false), apiSecret(false) {}
  bool uri :1;
  bool apiKey :1;
  bool apiSecret :1;
} _RemoteController_loginToHazelcastCloud_args__isset;

class RemoteController_loginToHazelcastCloud_args {
 public:

  RemoteController_loginToHazelcastCloud_args(const RemoteController_loginToHazelcastCloud_args&);
  RemoteController_loginToHazelcastCloud_args& operator=(const RemoteController_loginToHazelcastCloud_args&);
  RemoteController_loginToHazelcastCloud_args() : uri(), apiKey(), apiSecret() {
  }

  virtual ~RemoteController_loginToHazelcastCloud_args() noexcept;
  std::string uri;
  std::string apiKey;
  std::string apiSecret;

  _RemoteController_loginToHazelcastCloud_args__isset __isset;

  void __set_uri(const std::string& val);

  void __set_apiKey(const std::string& val);

  void __set_apiSecret(const std::string& val);

  bool operator == (const RemoteController_loginToHazelcastCloud_args & rhs) const
  {
    if (!(uri == rhs.uri))
      return false;
    if (!(apiKey == rhs.apiKey))
      return false;
    if (!(apiSecret == rhs.apiSecret))
      return false;
    return true;
  }
  bool operator != (const RemoteController_loginToHazelcastCloud_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_loginToHazelcastCloud_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_loginToHazelcastCloud_pargs {
 public:


  virtual ~RemoteController_loginToHazelcastCloud_pargs() noexcept;
  const std::string* uri;
  const std::string* apiKey;
  const std::string* apiSecret;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_loginToHazelcastCloud_result {
 public:

  RemoteController_loginToHazelcastCloud_result(const RemoteController_loginToHazelcastCloud_result&);
  RemoteController_loginToHazelcastCloud_result& operator=(const RemoteController_loginToHazelcastCloud_result&);
  RemoteController_loginToHazelcastCloud_result() {
  }

  virtual ~RemoteController_loginToHazelcastCloud_result() noexcept;

  bool operator == (const RemoteController_loginToHazelcastCloud_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RemoteController_loginToHazelcastCloud_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_loginToHazelcastCloud_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_loginToHazelcastCloud_presult {
 public:


  virtual ~RemoteController_loginToHazelcastCloud_presult() noexcept;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteController_createHazelcastCloudStandardCluster_args__isset {
  _RemoteController_createHazelcastCloudStandardCluster_args__isset() : hazelcastVersion(false), isTlsEnabled(false) {}
  bool hazelcastVersion :1;
  bool isTlsEnabled :1;
} _RemoteController_createHazelcastCloudStandardCluster_args__isset;

class RemoteController_createHazelcastCloudStandardCluster_args {
 public:

  RemoteController_createHazelcastCloudStandardCluster_args(const RemoteController_createHazelcastCloudStandardCluster_args&);
  RemoteController_createHazelcastCloudStandardCluster_args& operator=(const RemoteController_createHazelcastCloudStandardCluster_args&);
  RemoteController_createHazelcastCloudStandardCluster_args() : hazelcastVersion(), isTlsEnabled(0) {
  }

  virtual ~RemoteController_createHazelcastCloudStandardCluster_args() noexcept;
  std::string hazelcastVersion;
  bool isTlsEnabled;

  _RemoteController_createHazelcastCloudStandardCluster_args__isset __isset;

  void __set_hazelcastVersion(const std::string& val);

  void __set_isTlsEnabled(const bool val);

  bool operator == (const RemoteController_createHazelcastCloudStandardCluster_args & rhs) const
  {
    if (!(hazelcastVersion == rhs.hazelcastVersion))
      return false;
    if (!(isTlsEnabled == rhs.isTlsEnabled))
      return false;
    return true;
  }
  bool operator != (const RemoteController_createHazelcastCloudStandardCluster_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_createHazelcastCloudStandardCluster_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_createHazelcastCloudStandardCluster_pargs {
 public:


  virtual ~RemoteController_createHazelcastCloudStandardCluster_pargs() noexcept;
  const std::string* hazelcastVersion;
  const bool* isTlsEnabled;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_createHazelcastCloudStandardCluster_result__isset {
  _RemoteController_createHazelcastCloudStandardCluster_result__isset() : success(false) {}
  bool success :1;
} _RemoteController_createHazelcastCloudStandardCluster_result__isset;

class RemoteController_createHazelcastCloudStandardCluster_result {
 public:

  RemoteController_createHazelcastCloudStandardCluster_result(const RemoteController_createHazelcastCloudStandardCluster_result&);
  RemoteController_createHazelcastCloudStandardCluster_result& operator=(const RemoteController_createHazelcastCloudStandardCluster_result&);
  RemoteController_createHazelcastCloudStandardCluster_result() {
  }

  virtual ~RemoteController_createHazelcastCloudStandardCluster_result() noexcept;
  CloudCluster success;

  _RemoteController_createHazelcastCloudStandardCluster_result__isset __isset;

  void __set_success(const CloudCluster& val);

  bool operator == (const RemoteController_createHazelcastCloudStandardCluster_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteController_createHazelcastCloudStandardCluster_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_createHazelcastCloudStandardCluster_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_createHazelcastCloudStandardCluster_presult__isset {
  _RemoteController_createHazelcastCloudStandardCluster_presult__isset() : success(false) {}
  bool success :1;
} _RemoteController_createHazelcastCloudStandardCluster_presult__isset;

class RemoteController_createHazelcastCloudStandardCluster_presult {
 public:


  virtual ~RemoteController_createHazelcastCloudStandardCluster_presult() noexcept;
  CloudCluster* success;

  _RemoteController_createHazelcastCloudStandardCluster_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteController_createHazelcastCloudEnterpriseCluster_args__isset {
  _RemoteController_createHazelcastCloudEnterpriseCluster_args__isset() : cloudProvider(false), hazelcastVersion(false), isTlsEnabled(false) {}
  bool cloudProvider :1;
  bool hazelcastVersion :1;
  bool isTlsEnabled :1;
} _RemoteController_createHazelcastCloudEnterpriseCluster_args__isset;

class RemoteController_createHazelcastCloudEnterpriseCluster_args {
 public:

  RemoteController_createHazelcastCloudEnterpriseCluster_args(const RemoteController_createHazelcastCloudEnterpriseCluster_args&);
  RemoteController_createHazelcastCloudEnterpriseCluster_args& operator=(const RemoteController_createHazelcastCloudEnterpriseCluster_args&);
  RemoteController_createHazelcastCloudEnterpriseCluster_args() : cloudProvider(), hazelcastVersion(), isTlsEnabled(0) {
  }

  virtual ~RemoteController_createHazelcastCloudEnterpriseCluster_args() noexcept;
  std::string cloudProvider;
  std::string hazelcastVersion;
  bool isTlsEnabled;

  _RemoteController_createHazelcastCloudEnterpriseCluster_args__isset __isset;

  void __set_cloudProvider(const std::string& val);

  void __set_hazelcastVersion(const std::string& val);

  void __set_isTlsEnabled(const bool val);

  bool operator == (const RemoteController_createHazelcastCloudEnterpriseCluster_args & rhs) const
  {
    if (!(cloudProvider == rhs.cloudProvider))
      return false;
    if (!(hazelcastVersion == rhs.hazelcastVersion))
      return false;
    if (!(isTlsEnabled == rhs.isTlsEnabled))
      return false;
    return true;
  }
  bool operator != (const RemoteController_createHazelcastCloudEnterpriseCluster_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_createHazelcastCloudEnterpriseCluster_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_createHazelcastCloudEnterpriseCluster_pargs {
 public:


  virtual ~RemoteController_createHazelcastCloudEnterpriseCluster_pargs() noexcept;
  const std::string* cloudProvider;
  const std::string* hazelcastVersion;
  const bool* isTlsEnabled;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_createHazelcastCloudEnterpriseCluster_result__isset {
  _RemoteController_createHazelcastCloudEnterpriseCluster_result__isset() : success(false) {}
  bool success :1;
} _RemoteController_createHazelcastCloudEnterpriseCluster_result__isset;

class RemoteController_createHazelcastCloudEnterpriseCluster_result {
 public:

  RemoteController_createHazelcastCloudEnterpriseCluster_result(const RemoteController_createHazelcastCloudEnterpriseCluster_result&);
  RemoteController_createHazelcastCloudEnterpriseCluster_result& operator=(const RemoteController_createHazelcastCloudEnterpriseCluster_result&);
  RemoteController_createHazelcastCloudEnterpriseCluster_result() {
  }

  virtual ~RemoteController_createHazelcastCloudEnterpriseCluster_result() noexcept;
  CloudCluster success;

  _RemoteController_createHazelcastCloudEnterpriseCluster_result__isset __isset;

  void __set_success(const CloudCluster& val);

  bool operator == (const RemoteController_createHazelcastCloudEnterpriseCluster_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteController_createHazelcastCloudEnterpriseCluster_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_createHazelcastCloudEnterpriseCluster_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_createHazelcastCloudEnterpriseCluster_presult__isset {
  _RemoteController_createHazelcastCloudEnterpriseCluster_presult__isset() : success(false) {}
  bool success :1;
} _RemoteController_createHazelcastCloudEnterpriseCluster_presult__isset;

class RemoteController_createHazelcastCloudEnterpriseCluster_presult {
 public:


  virtual ~RemoteController_createHazelcastCloudEnterpriseCluster_presult() noexcept;
  CloudCluster* success;

  _RemoteController_createHazelcastCloudEnterpriseCluster_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteController_scaleUpDownHazelcastCloudStandardCluster_args__isset {
  _RemoteController_scaleUpDownHazelcastCloudStandardCluster_args__isset() : id(false), scaleNumber(false) {}
  bool id :1;
  bool scaleNumber :1;
} _RemoteController_scaleUpDownHazelcastCloudStandardCluster_args__isset;

class RemoteController_scaleUpDownHazelcastCloudStandardCluster_args {
 public:

  RemoteController_scaleUpDownHazelcastCloudStandardCluster_args(const RemoteController_scaleUpDownHazelcastCloudStandardCluster_args&);
  RemoteController_scaleUpDownHazelcastCloudStandardCluster_args& operator=(const RemoteController_scaleUpDownHazelcastCloudStandardCluster_args&);
  RemoteController_scaleUpDownHazelcastCloudStandardCluster_args() : id(), scaleNumber(0) {
  }

  virtual ~RemoteController_scaleUpDownHazelcastCloudStandardCluster_args() noexcept;
  std::string id;
  int32_t scaleNumber;

  _RemoteController_scaleUpDownHazelcastCloudStandardCluster_args__isset __isset;

  void __set_id(const std::string& val);

  void __set_scaleNumber(const int32_t val);

  bool operator == (const RemoteController_scaleUpDownHazelcastCloudStandardCluster_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    if (!(scaleNumber == rhs.scaleNumber))
      return false;
    return true;
  }
  bool operator != (const RemoteController_scaleUpDownHazelcastCloudStandardCluster_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_scaleUpDownHazelcastCloudStandardCluster_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_scaleUpDownHazelcastCloudStandardCluster_pargs {
 public:


  virtual ~RemoteController_scaleUpDownHazelcastCloudStandardCluster_pargs() noexcept;
  const std::string* id;
  const int32_t* scaleNumber;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_scaleUpDownHazelcastCloudStandardCluster_result__isset {
  _RemoteController_scaleUpDownHazelcastCloudStandardCluster_result__isset() : success(false) {}
  bool success :1;
} _RemoteController_scaleUpDownHazelcastCloudStandardCluster_result__isset;

class RemoteController_scaleUpDownHazelcastCloudStandardCluster_result {
 public:

  RemoteController_scaleUpDownHazelcastCloudStandardCluster_result(const RemoteController_scaleUpDownHazelcastCloudStandardCluster_result&);
  RemoteController_scaleUpDownHazelcastCloudStandardCluster_result& operator=(const RemoteController_scaleUpDownHazelcastCloudStandardCluster_result&);
  RemoteController_scaleUpDownHazelcastCloudStandardCluster_result() : success(0) {
  }

  virtual ~RemoteController_scaleUpDownHazelcastCloudStandardCluster_result() noexcept;
  bool success;

  _RemoteController_scaleUpDownHazelcastCloudStandardCluster_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RemoteController_scaleUpDownHazelcastCloudStandardCluster_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteController_scaleUpDownHazelcastCloudStandardCluster_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_scaleUpDownHazelcastCloudStandardCluster_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_scaleUpDownHazelcastCloudStandardCluster_presult__isset {
  _RemoteController_scaleUpDownHazelcastCloudStandardCluster_presult__isset() : success(false) {}
  bool success :1;
} _RemoteController_scaleUpDownHazelcastCloudStandardCluster_presult__isset;

class RemoteController_scaleUpDownHazelcastCloudStandardCluster_presult {
 public:


  virtual ~RemoteController_scaleUpDownHazelcastCloudStandardCluster_presult() noexcept;
  bool* success;

  _RemoteController_scaleUpDownHazelcastCloudStandardCluster_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteController_getHazelcastCloudCluster_args__isset {
  _RemoteController_getHazelcastCloudCluster_args__isset() : id(false) {}
  bool id :1;
} _RemoteController_getHazelcastCloudCluster_args__isset;

class RemoteController_getHazelcastCloudCluster_args {
 public:

  RemoteController_getHazelcastCloudCluster_args(const RemoteController_getHazelcastCloudCluster_args&);
  RemoteController_getHazelcastCloudCluster_args& operator=(const RemoteController_getHazelcastCloudCluster_args&);
  RemoteController_getHazelcastCloudCluster_args() : id() {
  }

  virtual ~RemoteController_getHazelcastCloudCluster_args() noexcept;
  std::string id;

  _RemoteController_getHazelcastCloudCluster_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const RemoteController_getHazelcastCloudCluster_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const RemoteController_getHazelcastCloudCluster_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_getHazelcastCloudCluster_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_getHazelcastCloudCluster_pargs {
 public:


  virtual ~RemoteController_getHazelcastCloudCluster_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_getHazelcastCloudCluster_result__isset {
  _RemoteController_getHazelcastCloudCluster_result__isset() : success(false) {}
  bool success :1;
} _RemoteController_getHazelcastCloudCluster_result__isset;

class RemoteController_getHazelcastCloudCluster_result {
 public:

  RemoteController_getHazelcastCloudCluster_result(const RemoteController_getHazelcastCloudCluster_result&);
  RemoteController_getHazelcastCloudCluster_result& operator=(const RemoteController_getHazelcastCloudCluster_result&);
  RemoteController_getHazelcastCloudCluster_result() {
  }

  virtual ~RemoteController_getHazelcastCloudCluster_result() noexcept;
  CloudCluster success;

  _RemoteController_getHazelcastCloudCluster_result__isset __isset;

  void __set_success(const CloudCluster& val);

  bool operator == (const RemoteController_getHazelcastCloudCluster_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteController_getHazelcastCloudCluster_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_getHazelcastCloudCluster_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_getHazelcastCloudCluster_presult__isset {
  _RemoteController_getHazelcastCloudCluster_presult__isset() : success(false) {}
  bool success :1;
} _RemoteController_getHazelcastCloudCluster_presult__isset;

class RemoteController_getHazelcastCloudCluster_presult {
 public:


  virtual ~RemoteController_getHazelcastCloudCluster_presult() noexcept;
  CloudCluster* success;

  _RemoteController_getHazelcastCloudCluster_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteController_stopHazelcastCloudCluster_args__isset {
  _RemoteController_stopHazelcastCloudCluster_args__isset() : id(false) {}
  bool id :1;
} _RemoteController_stopHazelcastCloudCluster_args__isset;

class RemoteController_stopHazelcastCloudCluster_args {
 public:

  RemoteController_stopHazelcastCloudCluster_args(const RemoteController_stopHazelcastCloudCluster_args&);
  RemoteController_stopHazelcastCloudCluster_args& operator=(const RemoteController_stopHazelcastCloudCluster_args&);
  RemoteController_stopHazelcastCloudCluster_args() : id() {
  }

  virtual ~RemoteController_stopHazelcastCloudCluster_args() noexcept;
  std::string id;

  _RemoteController_stopHazelcastCloudCluster_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const RemoteController_stopHazelcastCloudCluster_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const RemoteController_stopHazelcastCloudCluster_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_stopHazelcastCloudCluster_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_stopHazelcastCloudCluster_pargs {
 public:


  virtual ~RemoteController_stopHazelcastCloudCluster_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_stopHazelcastCloudCluster_result__isset {
  _RemoteController_stopHazelcastCloudCluster_result__isset() : success(false) {}
  bool success :1;
} _RemoteController_stopHazelcastCloudCluster_result__isset;

class RemoteController_stopHazelcastCloudCluster_result {
 public:

  RemoteController_stopHazelcastCloudCluster_result(const RemoteController_stopHazelcastCloudCluster_result&);
  RemoteController_stopHazelcastCloudCluster_result& operator=(const RemoteController_stopHazelcastCloudCluster_result&);
  RemoteController_stopHazelcastCloudCluster_result() {
  }

  virtual ~RemoteController_stopHazelcastCloudCluster_result() noexcept;
  CloudCluster success;

  _RemoteController_stopHazelcastCloudCluster_result__isset __isset;

  void __set_success(const CloudCluster& val);

  bool operator == (const RemoteController_stopHazelcastCloudCluster_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteController_stopHazelcastCloudCluster_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_stopHazelcastCloudCluster_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_stopHazelcastCloudCluster_presult__isset {
  _RemoteController_stopHazelcastCloudCluster_presult__isset() : success(false) {}
  bool success :1;
} _RemoteController_stopHazelcastCloudCluster_presult__isset;

class RemoteController_stopHazelcastCloudCluster_presult {
 public:


  virtual ~RemoteController_stopHazelcastCloudCluster_presult() noexcept;
  CloudCluster* success;

  _RemoteController_stopHazelcastCloudCluster_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteController_resumeHazelcastCloudCluster_args__isset {
  _RemoteController_resumeHazelcastCloudCluster_args__isset() : id(false) {}
  bool id :1;
} _RemoteController_resumeHazelcastCloudCluster_args__isset;

class RemoteController_resumeHazelcastCloudCluster_args {
 public:

  RemoteController_resumeHazelcastCloudCluster_args(const RemoteController_resumeHazelcastCloudCluster_args&);
  RemoteController_resumeHazelcastCloudCluster_args& operator=(const RemoteController_resumeHazelcastCloudCluster_args&);
  RemoteController_resumeHazelcastCloudCluster_args() : id() {
  }

  virtual ~RemoteController_resumeHazelcastCloudCluster_args() noexcept;
  std::string id;

  _RemoteController_resumeHazelcastCloudCluster_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const RemoteController_resumeHazelcastCloudCluster_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const RemoteController_resumeHazelcastCloudCluster_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_resumeHazelcastCloudCluster_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_resumeHazelcastCloudCluster_pargs {
 public:


  virtual ~RemoteController_resumeHazelcastCloudCluster_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_resumeHazelcastCloudCluster_result__isset {
  _RemoteController_resumeHazelcastCloudCluster_result__isset() : success(false) {}
  bool success :1;
} _RemoteController_resumeHazelcastCloudCluster_result__isset;

class RemoteController_resumeHazelcastCloudCluster_result {
 public:

  RemoteController_resumeHazelcastCloudCluster_result(const RemoteController_resumeHazelcastCloudCluster_result&);
  RemoteController_resumeHazelcastCloudCluster_result& operator=(const RemoteController_resumeHazelcastCloudCluster_result&);
  RemoteController_resumeHazelcastCloudCluster_result() {
  }

  virtual ~RemoteController_resumeHazelcastCloudCluster_result() noexcept;
  CloudCluster success;

  _RemoteController_resumeHazelcastCloudCluster_result__isset __isset;

  void __set_success(const CloudCluster& val);

  bool operator == (const RemoteController_resumeHazelcastCloudCluster_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteController_resumeHazelcastCloudCluster_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_resumeHazelcastCloudCluster_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_resumeHazelcastCloudCluster_presult__isset {
  _RemoteController_resumeHazelcastCloudCluster_presult__isset() : success(false) {}
  bool success :1;
} _RemoteController_resumeHazelcastCloudCluster_presult__isset;

class RemoteController_resumeHazelcastCloudCluster_presult {
 public:


  virtual ~RemoteController_resumeHazelcastCloudCluster_presult() noexcept;
  CloudCluster* success;

  _RemoteController_resumeHazelcastCloudCluster_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteController_deleteHazelcastCloudCluster_args__isset {
  _RemoteController_deleteHazelcastCloudCluster_args__isset() : id(false) {}
  bool id :1;
} _RemoteController_deleteHazelcastCloudCluster_args__isset;

class RemoteController_deleteHazelcastCloudCluster_args {
 public:

  RemoteController_deleteHazelcastCloudCluster_args(const RemoteController_deleteHazelcastCloudCluster_args&);
  RemoteController_deleteHazelcastCloudCluster_args& operator=(const RemoteController_deleteHazelcastCloudCluster_args&);
  RemoteController_deleteHazelcastCloudCluster_args() : id() {
  }

  virtual ~RemoteController_deleteHazelcastCloudCluster_args() noexcept;
  std::string id;

  _RemoteController_deleteHazelcastCloudCluster_args__isset __isset;

  void __set_id(const std::string& val);

  bool operator == (const RemoteController_deleteHazelcastCloudCluster_args & rhs) const
  {
    if (!(id == rhs.id))
      return false;
    return true;
  }
  bool operator != (const RemoteController_deleteHazelcastCloudCluster_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_deleteHazelcastCloudCluster_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_deleteHazelcastCloudCluster_pargs {
 public:


  virtual ~RemoteController_deleteHazelcastCloudCluster_pargs() noexcept;
  const std::string* id;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_deleteHazelcastCloudCluster_result__isset {
  _RemoteController_deleteHazelcastCloudCluster_result__isset() : success(false) {}
  bool success :1;
} _RemoteController_deleteHazelcastCloudCluster_result__isset;

class RemoteController_deleteHazelcastCloudCluster_result {
 public:

  RemoteController_deleteHazelcastCloudCluster_result(const RemoteController_deleteHazelcastCloudCluster_result&);
  RemoteController_deleteHazelcastCloudCluster_result& operator=(const RemoteController_deleteHazelcastCloudCluster_result&);
  RemoteController_deleteHazelcastCloudCluster_result() : success(0) {
  }

  virtual ~RemoteController_deleteHazelcastCloudCluster_result() noexcept;
  bool success;

  _RemoteController_deleteHazelcastCloudCluster_result__isset __isset;

  void __set_success(const bool val);

  bool operator == (const RemoteController_deleteHazelcastCloudCluster_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteController_deleteHazelcastCloudCluster_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_deleteHazelcastCloudCluster_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_deleteHazelcastCloudCluster_presult__isset {
  _RemoteController_deleteHazelcastCloudCluster_presult__isset() : success(false) {}
  bool success :1;
} _RemoteController_deleteHazelcastCloudCluster_presult__isset;

class RemoteController_deleteHazelcastCloudCluster_presult {
 public:


  virtual ~RemoteController_deleteHazelcastCloudCluster_presult() noexcept;
  bool* success;

  _RemoteController_deleteHazelcastCloudCluster_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RemoteController_executeOnController_args__isset {
  _RemoteController_executeOnController_args__isset() : clusterId(false), script(false), lang(false) {}
  bool clusterId :1;
  bool script :1;
  bool lang :1;
} _RemoteController_executeOnController_args__isset;

class RemoteController_executeOnController_args {
 public:

  RemoteController_executeOnController_args(const RemoteController_executeOnController_args&);
  RemoteController_executeOnController_args& operator=(const RemoteController_executeOnController_args&);
  RemoteController_executeOnController_args() : clusterId(), script(), lang((Lang::type)0) {
  }

  virtual ~RemoteController_executeOnController_args() noexcept;
  std::string clusterId;
  std::string script;
  Lang::type lang;

  _RemoteController_executeOnController_args__isset __isset;

  void __set_clusterId(const std::string& val);

  void __set_script(const std::string& val);

  void __set_lang(const Lang::type val);

  bool operator == (const RemoteController_executeOnController_args & rhs) const
  {
    if (!(clusterId == rhs.clusterId))
      return false;
    if (!(script == rhs.script))
      return false;
    if (!(lang == rhs.lang))
      return false;
    return true;
  }
  bool operator != (const RemoteController_executeOnController_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_executeOnController_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RemoteController_executeOnController_pargs {
 public:


  virtual ~RemoteController_executeOnController_pargs() noexcept;
  const std::string* clusterId;
  const std::string* script;
  const Lang::type* lang;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_executeOnController_result__isset {
  _RemoteController_executeOnController_result__isset() : success(false) {}
  bool success :1;
} _RemoteController_executeOnController_result__isset;

class RemoteController_executeOnController_result {
 public:

  RemoteController_executeOnController_result(const RemoteController_executeOnController_result&);
  RemoteController_executeOnController_result& operator=(const RemoteController_executeOnController_result&);
  RemoteController_executeOnController_result() {
  }

  virtual ~RemoteController_executeOnController_result() noexcept;
  Response success;

  _RemoteController_executeOnController_result__isset __isset;

  void __set_success(const Response& val);

  bool operator == (const RemoteController_executeOnController_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RemoteController_executeOnController_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RemoteController_executeOnController_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RemoteController_executeOnController_presult__isset {
  _RemoteController_executeOnController_presult__isset() : success(false) {}
  bool success :1;
} _RemoteController_executeOnController_presult__isset;

class RemoteController_executeOnController_presult {
 public:


  virtual ~RemoteController_executeOnController_presult() noexcept;
  Response* success;

  _RemoteController_executeOnController_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RemoteControllerClient : virtual public RemoteControllerIf {
 public:
  RemoteControllerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  RemoteControllerClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool ping();
  void send_ping();
  bool recv_ping();
  bool clean();
  void send_clean();
  bool recv_clean();
  bool exit();
  void send_exit();
  bool recv_exit();
  void createCluster(Cluster& _return, const std::string& hzVersion, const std::string& xmlconfig);
  void send_createCluster(const std::string& hzVersion, const std::string& xmlconfig);
  void recv_createCluster(Cluster& _return);
  void createClusterKeepClusterName(Cluster& _return, const std::string& hzVersion, const std::string& xmlconfig);
  void send_createClusterKeepClusterName(const std::string& hzVersion, const std::string& xmlconfig);
  void recv_createClusterKeepClusterName(Cluster& _return);
  void startMember(Member& _return, const std::string& clusterId);
  void send_startMember(const std::string& clusterId);
  void recv_startMember(Member& _return);
  bool shutdownMember(const std::string& clusterId, const std::string& memberId);
  void send_shutdownMember(const std::string& clusterId, const std::string& memberId);
  bool recv_shutdownMember();
  bool terminateMember(const std::string& clusterId, const std::string& memberId);
  void send_terminateMember(const std::string& clusterId, const std::string& memberId);
  bool recv_terminateMember();
  bool suspendMember(const std::string& clusterId, const std::string& memberId);
  void send_suspendMember(const std::string& clusterId, const std::string& memberId);
  bool recv_suspendMember();
  bool resumeMember(const std::string& clusterId, const std::string& memberId);
  void send_resumeMember(const std::string& clusterId, const std::string& memberId);
  bool recv_resumeMember();
  bool shutdownCluster(const std::string& clusterId);
  void send_shutdownCluster(const std::string& clusterId);
  bool recv_shutdownCluster();
  bool terminateCluster(const std::string& clusterId);
  void send_terminateCluster(const std::string& clusterId);
  bool recv_terminateCluster();
  void splitMemberFromCluster(Cluster& _return, const std::string& memberId);
  void send_splitMemberFromCluster(const std::string& memberId);
  void recv_splitMemberFromCluster(Cluster& _return);
  void mergeMemberToCluster(Cluster& _return, const std::string& clusterId, const std::string& memberId);
  void send_mergeMemberToCluster(const std::string& clusterId, const std::string& memberId);
  void recv_mergeMemberToCluster(Cluster& _return);
  void loginToHazelcastCloud(const std::string& uri, const std::string& apiKey, const std::string& apiSecret);
  void send_loginToHazelcastCloud(const std::string& uri, const std::string& apiKey, const std::string& apiSecret);
  void recv_loginToHazelcastCloud();
  void createHazelcastCloudStandardCluster(CloudCluster& _return, const std::string& hazelcastVersion, const bool isTlsEnabled);
  void send_createHazelcastCloudStandardCluster(const std::string& hazelcastVersion, const bool isTlsEnabled);
  void recv_createHazelcastCloudStandardCluster(CloudCluster& _return);
  void createHazelcastCloudEnterpriseCluster(CloudCluster& _return, const std::string& cloudProvider, const std::string& hazelcastVersion, const bool isTlsEnabled);
  void send_createHazelcastCloudEnterpriseCluster(const std::string& cloudProvider, const std::string& hazelcastVersion, const bool isTlsEnabled);
  void recv_createHazelcastCloudEnterpriseCluster(CloudCluster& _return);
  bool scaleUpDownHazelcastCloudStandardCluster(const std::string& id, const int32_t scaleNumber);
  void send_scaleUpDownHazelcastCloudStandardCluster(const std::string& id, const int32_t scaleNumber);
  bool recv_scaleUpDownHazelcastCloudStandardCluster();
  void getHazelcastCloudCluster(CloudCluster& _return, const std::string& id);
  void send_getHazelcastCloudCluster(const std::string& id);
  void recv_getHazelcastCloudCluster(CloudCluster& _return);
  void stopHazelcastCloudCluster(CloudCluster& _return, const std::string& id);
  void send_stopHazelcastCloudCluster(const std::string& id);
  void recv_stopHazelcastCloudCluster(CloudCluster& _return);
  void resumeHazelcastCloudCluster(CloudCluster& _return, const std::string& id);
  void send_resumeHazelcastCloudCluster(const std::string& id);
  void recv_resumeHazelcastCloudCluster(CloudCluster& _return);
  bool deleteHazelcastCloudCluster(const std::string& id);
  void send_deleteHazelcastCloudCluster(const std::string& id);
  bool recv_deleteHazelcastCloudCluster();
  void executeOnController(Response& _return, const std::string& clusterId, const std::string& script, const Lang::type lang);
  void send_executeOnController(const std::string& clusterId, const std::string& script, const Lang::type lang);
  void recv_executeOnController(Response& _return);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RemoteControllerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  ::std::shared_ptr<RemoteControllerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RemoteControllerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_clean(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_exit(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createCluster(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createClusterKeepClusterName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_startMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shutdownMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_terminateMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_suspendMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resumeMember(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_shutdownCluster(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_terminateCluster(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_splitMemberFromCluster(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_mergeMemberToCluster(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_loginToHazelcastCloud(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createHazelcastCloudStandardCluster(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_createHazelcastCloudEnterpriseCluster(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_scaleUpDownHazelcastCloudStandardCluster(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_getHazelcastCloudCluster(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_stopHazelcastCloudCluster(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_resumeHazelcastCloudCluster(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_deleteHazelcastCloudCluster(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_executeOnController(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RemoteControllerProcessor(::std::shared_ptr<RemoteControllerIf> iface) :
    iface_(iface) {
    processMap_["ping"] = &RemoteControllerProcessor::process_ping;
    processMap_["clean"] = &RemoteControllerProcessor::process_clean;
    processMap_["exit"] = &RemoteControllerProcessor::process_exit;
    processMap_["createCluster"] = &RemoteControllerProcessor::process_createCluster;
    processMap_["createClusterKeepClusterName"] = &RemoteControllerProcessor::process_createClusterKeepClusterName;
    processMap_["startMember"] = &RemoteControllerProcessor::process_startMember;
    processMap_["shutdownMember"] = &RemoteControllerProcessor::process_shutdownMember;
    processMap_["terminateMember"] = &RemoteControllerProcessor::process_terminateMember;
    processMap_["suspendMember"] = &RemoteControllerProcessor::process_suspendMember;
    processMap_["resumeMember"] = &RemoteControllerProcessor::process_resumeMember;
    processMap_["shutdownCluster"] = &RemoteControllerProcessor::process_shutdownCluster;
    processMap_["terminateCluster"] = &RemoteControllerProcessor::process_terminateCluster;
    processMap_["splitMemberFromCluster"] = &RemoteControllerProcessor::process_splitMemberFromCluster;
    processMap_["mergeMemberToCluster"] = &RemoteControllerProcessor::process_mergeMemberToCluster;
    processMap_["loginToHazelcastCloud"] = &RemoteControllerProcessor::process_loginToHazelcastCloud;
    processMap_["createHazelcastCloudStandardCluster"] = &RemoteControllerProcessor::process_createHazelcastCloudStandardCluster;
    processMap_["createHazelcastCloudEnterpriseCluster"] = &RemoteControllerProcessor::process_createHazelcastCloudEnterpriseCluster;
    processMap_["scaleUpDownHazelcastCloudStandardCluster"] = &RemoteControllerProcessor::process_scaleUpDownHazelcastCloudStandardCluster;
    processMap_["getHazelcastCloudCluster"] = &RemoteControllerProcessor::process_getHazelcastCloudCluster;
    processMap_["stopHazelcastCloudCluster"] = &RemoteControllerProcessor::process_stopHazelcastCloudCluster;
    processMap_["resumeHazelcastCloudCluster"] = &RemoteControllerProcessor::process_resumeHazelcastCloudCluster;
    processMap_["deleteHazelcastCloudCluster"] = &RemoteControllerProcessor::process_deleteHazelcastCloudCluster;
    processMap_["executeOnController"] = &RemoteControllerProcessor::process_executeOnController;
  }

  virtual ~RemoteControllerProcessor() {}
};

class RemoteControllerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RemoteControllerProcessorFactory(const ::std::shared_ptr< RemoteControllerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::std::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::std::shared_ptr< RemoteControllerIfFactory > handlerFactory_;
};

class RemoteControllerMultiface : virtual public RemoteControllerIf {
 public:
  RemoteControllerMultiface(std::vector<std::shared_ptr<RemoteControllerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RemoteControllerMultiface() {}
 protected:
  std::vector<std::shared_ptr<RemoteControllerIf> > ifaces_;
  RemoteControllerMultiface() {}
  void add(::std::shared_ptr<RemoteControllerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  bool ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ping();
    }
    return ifaces_[i]->ping();
  }

  bool clean() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->clean();
    }
    return ifaces_[i]->clean();
  }

  bool exit() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->exit();
    }
    return ifaces_[i]->exit();
  }

  void createCluster(Cluster& _return, const std::string& hzVersion, const std::string& xmlconfig) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createCluster(_return, hzVersion, xmlconfig);
    }
    ifaces_[i]->createCluster(_return, hzVersion, xmlconfig);
    return;
  }

  void createClusterKeepClusterName(Cluster& _return, const std::string& hzVersion, const std::string& xmlconfig) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createClusterKeepClusterName(_return, hzVersion, xmlconfig);
    }
    ifaces_[i]->createClusterKeepClusterName(_return, hzVersion, xmlconfig);
    return;
  }

  void startMember(Member& _return, const std::string& clusterId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->startMember(_return, clusterId);
    }
    ifaces_[i]->startMember(_return, clusterId);
    return;
  }

  bool shutdownMember(const std::string& clusterId, const std::string& memberId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shutdownMember(clusterId, memberId);
    }
    return ifaces_[i]->shutdownMember(clusterId, memberId);
  }

  bool terminateMember(const std::string& clusterId, const std::string& memberId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->terminateMember(clusterId, memberId);
    }
    return ifaces_[i]->terminateMember(clusterId, memberId);
  }

  bool suspendMember(const std::string& clusterId, const std::string& memberId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->suspendMember(clusterId, memberId);
    }
    return ifaces_[i]->suspendMember(clusterId, memberId);
  }

  bool resumeMember(const std::string& clusterId, const std::string& memberId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resumeMember(clusterId, memberId);
    }
    return ifaces_[i]->resumeMember(clusterId, memberId);
  }

  bool shutdownCluster(const std::string& clusterId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->shutdownCluster(clusterId);
    }
    return ifaces_[i]->shutdownCluster(clusterId);
  }

  bool terminateCluster(const std::string& clusterId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->terminateCluster(clusterId);
    }
    return ifaces_[i]->terminateCluster(clusterId);
  }

  void splitMemberFromCluster(Cluster& _return, const std::string& memberId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->splitMemberFromCluster(_return, memberId);
    }
    ifaces_[i]->splitMemberFromCluster(_return, memberId);
    return;
  }

  void mergeMemberToCluster(Cluster& _return, const std::string& clusterId, const std::string& memberId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->mergeMemberToCluster(_return, clusterId, memberId);
    }
    ifaces_[i]->mergeMemberToCluster(_return, clusterId, memberId);
    return;
  }

  void loginToHazelcastCloud(const std::string& uri, const std::string& apiKey, const std::string& apiSecret) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->loginToHazelcastCloud(uri, apiKey, apiSecret);
    }
    ifaces_[i]->loginToHazelcastCloud(uri, apiKey, apiSecret);
  }

  void createHazelcastCloudStandardCluster(CloudCluster& _return, const std::string& hazelcastVersion, const bool isTlsEnabled) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createHazelcastCloudStandardCluster(_return, hazelcastVersion, isTlsEnabled);
    }
    ifaces_[i]->createHazelcastCloudStandardCluster(_return, hazelcastVersion, isTlsEnabled);
    return;
  }

  void createHazelcastCloudEnterpriseCluster(CloudCluster& _return, const std::string& cloudProvider, const std::string& hazelcastVersion, const bool isTlsEnabled) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->createHazelcastCloudEnterpriseCluster(_return, cloudProvider, hazelcastVersion, isTlsEnabled);
    }
    ifaces_[i]->createHazelcastCloudEnterpriseCluster(_return, cloudProvider, hazelcastVersion, isTlsEnabled);
    return;
  }

  bool scaleUpDownHazelcastCloudStandardCluster(const std::string& id, const int32_t scaleNumber) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->scaleUpDownHazelcastCloudStandardCluster(id, scaleNumber);
    }
    return ifaces_[i]->scaleUpDownHazelcastCloudStandardCluster(id, scaleNumber);
  }

  void getHazelcastCloudCluster(CloudCluster& _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getHazelcastCloudCluster(_return, id);
    }
    ifaces_[i]->getHazelcastCloudCluster(_return, id);
    return;
  }

  void stopHazelcastCloudCluster(CloudCluster& _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->stopHazelcastCloudCluster(_return, id);
    }
    ifaces_[i]->stopHazelcastCloudCluster(_return, id);
    return;
  }

  void resumeHazelcastCloudCluster(CloudCluster& _return, const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->resumeHazelcastCloudCluster(_return, id);
    }
    ifaces_[i]->resumeHazelcastCloudCluster(_return, id);
    return;
  }

  bool deleteHazelcastCloudCluster(const std::string& id) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->deleteHazelcastCloudCluster(id);
    }
    return ifaces_[i]->deleteHazelcastCloudCluster(id);
  }

  void executeOnController(Response& _return, const std::string& clusterId, const std::string& script, const Lang::type lang) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->executeOnController(_return, clusterId, script, lang);
    }
    ifaces_[i]->executeOnController(_return, clusterId, script, lang);
    return;
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class RemoteControllerConcurrentClient : virtual public RemoteControllerIf {
 public:
  RemoteControllerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(prot);
  }
  RemoteControllerConcurrentClient(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot, std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync) : sync_(sync)
{
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(std::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, std::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  bool ping();
  int32_t send_ping();
  bool recv_ping(const int32_t seqid);
  bool clean();
  int32_t send_clean();
  bool recv_clean(const int32_t seqid);
  bool exit();
  int32_t send_exit();
  bool recv_exit(const int32_t seqid);
  void createCluster(Cluster& _return, const std::string& hzVersion, const std::string& xmlconfig);
  int32_t send_createCluster(const std::string& hzVersion, const std::string& xmlconfig);
  void recv_createCluster(Cluster& _return, const int32_t seqid);
  void createClusterKeepClusterName(Cluster& _return, const std::string& hzVersion, const std::string& xmlconfig);
  int32_t send_createClusterKeepClusterName(const std::string& hzVersion, const std::string& xmlconfig);
  void recv_createClusterKeepClusterName(Cluster& _return, const int32_t seqid);
  void startMember(Member& _return, const std::string& clusterId);
  int32_t send_startMember(const std::string& clusterId);
  void recv_startMember(Member& _return, const int32_t seqid);
  bool shutdownMember(const std::string& clusterId, const std::string& memberId);
  int32_t send_shutdownMember(const std::string& clusterId, const std::string& memberId);
  bool recv_shutdownMember(const int32_t seqid);
  bool terminateMember(const std::string& clusterId, const std::string& memberId);
  int32_t send_terminateMember(const std::string& clusterId, const std::string& memberId);
  bool recv_terminateMember(const int32_t seqid);
  bool suspendMember(const std::string& clusterId, const std::string& memberId);
  int32_t send_suspendMember(const std::string& clusterId, const std::string& memberId);
  bool recv_suspendMember(const int32_t seqid);
  bool resumeMember(const std::string& clusterId, const std::string& memberId);
  int32_t send_resumeMember(const std::string& clusterId, const std::string& memberId);
  bool recv_resumeMember(const int32_t seqid);
  bool shutdownCluster(const std::string& clusterId);
  int32_t send_shutdownCluster(const std::string& clusterId);
  bool recv_shutdownCluster(const int32_t seqid);
  bool terminateCluster(const std::string& clusterId);
  int32_t send_terminateCluster(const std::string& clusterId);
  bool recv_terminateCluster(const int32_t seqid);
  void splitMemberFromCluster(Cluster& _return, const std::string& memberId);
  int32_t send_splitMemberFromCluster(const std::string& memberId);
  void recv_splitMemberFromCluster(Cluster& _return, const int32_t seqid);
  void mergeMemberToCluster(Cluster& _return, const std::string& clusterId, const std::string& memberId);
  int32_t send_mergeMemberToCluster(const std::string& clusterId, const std::string& memberId);
  void recv_mergeMemberToCluster(Cluster& _return, const int32_t seqid);
  void loginToHazelcastCloud(const std::string& uri, const std::string& apiKey, const std::string& apiSecret);
  int32_t send_loginToHazelcastCloud(const std::string& uri, const std::string& apiKey, const std::string& apiSecret);
  void recv_loginToHazelcastCloud(const int32_t seqid);
  void createHazelcastCloudStandardCluster(CloudCluster& _return, const std::string& hazelcastVersion, const bool isTlsEnabled);
  int32_t send_createHazelcastCloudStandardCluster(const std::string& hazelcastVersion, const bool isTlsEnabled);
  void recv_createHazelcastCloudStandardCluster(CloudCluster& _return, const int32_t seqid);
  void createHazelcastCloudEnterpriseCluster(CloudCluster& _return, const std::string& cloudProvider, const std::string& hazelcastVersion, const bool isTlsEnabled);
  int32_t send_createHazelcastCloudEnterpriseCluster(const std::string& cloudProvider, const std::string& hazelcastVersion, const bool isTlsEnabled);
  void recv_createHazelcastCloudEnterpriseCluster(CloudCluster& _return, const int32_t seqid);
  bool scaleUpDownHazelcastCloudStandardCluster(const std::string& id, const int32_t scaleNumber);
  int32_t send_scaleUpDownHazelcastCloudStandardCluster(const std::string& id, const int32_t scaleNumber);
  bool recv_scaleUpDownHazelcastCloudStandardCluster(const int32_t seqid);
  void getHazelcastCloudCluster(CloudCluster& _return, const std::string& id);
  int32_t send_getHazelcastCloudCluster(const std::string& id);
  void recv_getHazelcastCloudCluster(CloudCluster& _return, const int32_t seqid);
  void stopHazelcastCloudCluster(CloudCluster& _return, const std::string& id);
  int32_t send_stopHazelcastCloudCluster(const std::string& id);
  void recv_stopHazelcastCloudCluster(CloudCluster& _return, const int32_t seqid);
  void resumeHazelcastCloudCluster(CloudCluster& _return, const std::string& id);
  int32_t send_resumeHazelcastCloudCluster(const std::string& id);
  void recv_resumeHazelcastCloudCluster(CloudCluster& _return, const int32_t seqid);
  bool deleteHazelcastCloudCluster(const std::string& id);
  int32_t send_deleteHazelcastCloudCluster(const std::string& id);
  bool recv_deleteHazelcastCloudCluster(const int32_t seqid);
  void executeOnController(Response& _return, const std::string& clusterId, const std::string& script, const Lang::type lang);
  int32_t send_executeOnController(const std::string& clusterId, const std::string& script, const Lang::type lang);
  void recv_executeOnController(Response& _return, const int32_t seqid);
 protected:
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  std::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  std::shared_ptr<::apache::thrift::async::TConcurrentClientSyncInfo> sync_;
};

#ifdef _MSC_VER
  #pragma warning( pop )
#endif

}}}} // namespace

#endif
